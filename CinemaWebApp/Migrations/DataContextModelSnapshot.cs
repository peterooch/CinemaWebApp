// <auto-generated />
using System;
using CinemaWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaWebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("CinemaWebApp.Models.Hall", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Movie", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Name");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Screening", b =>
                {
                    b.Property<string>("HallID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieName")
                        .HasColumnType("TEXT");

                    b.HasKey("HallID", "StartTime");

                    b.HasIndex("MovieName");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScreeningHallID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScreeningStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seat")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketOrderID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TicketID");

                    b.HasIndex("TicketOrderID");

                    b.HasIndex("ScreeningHallID", "ScreeningStartTime");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CinemaWebApp.Models.TicketOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuyerUserID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("BuyerUserID");

                    b.ToTable("TicketOrders");
                });

            modelBuilder.Entity("CinemaWebApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Admin", b =>
                {
                    b.HasBaseType("CinemaWebApp.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Screening", b =>
                {
                    b.HasOne("CinemaWebApp.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieName");
                });

            modelBuilder.Entity("CinemaWebApp.Models.Ticket", b =>
                {
                    b.HasOne("CinemaWebApp.Models.TicketOrder", null)
                        .WithMany("Tickets")
                        .HasForeignKey("TicketOrderID");

                    b.HasOne("CinemaWebApp.Models.Screening", "Screening")
                        .WithMany("Taken")
                        .HasForeignKey("ScreeningHallID", "ScreeningStartTime");
                });

            modelBuilder.Entity("CinemaWebApp.Models.TicketOrder", b =>
                {
                    b.HasOne("CinemaWebApp.Models.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
